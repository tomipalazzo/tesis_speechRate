#%% #import tables_speechRate as my_tables

#%% TO DO 
# 1. Identify the silence and call it 'sil' - OK
# 1.1 Do the necesary changes - OK
# 2. Do the Pablo's features - OK
# 3 Split train and test correctly


import sys
#from charsiu.src import models
from charsiu.src.Charsiu import Wav2Vec2ForFrameClassification, CharsiuPreprocessor_en, charsiu_forced_aligner
import torch 
import numpy as np
import matplotlib.pyplot as plt
import IPython.display as ipd
from datasets import load_dataset
import pandas as pd
import random
import librosa
#import src.tables_speechRate as my_tables
import src.utils as ut
import time
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import seaborn as sns
import ast  # For safely evaluating strings containing Python literals

# ---------------------------- LOAD DATASET -----------------------------------
#%% Load TIMIT
TIMIT = load_dataset('timit_asr', data_dir='/home/tomi/Documents/tesis_speechRate/timit')
TIMIT_train = TIMIT['train']
TIMIT_test = TIMIT['test']

#%% Load the Dataframes

record_phone_test = pd.read_csv('TIMIT_df_by_record_phone_test.csv')
record_phone_train = pd.read_csv('TIMIT_df_by_record_phone_train.csv')
sample_phone_train = pd.read_csv('TIMIT_df_by_sample_train.csv')
sample_phone_test = pd.read_csv('TIMIT_df_by_sample_test.csv')


#%% Load any CHARSIU phonogram generated by Get phonograms
#SAMPLE_ID = SAMPLE_IDs_TEST[0]
#phonogram = pd.read_csv('../tesis_speechRate/data_phonograms/CHARSIU/Test/'+SAMPLE_ID+'.csv')
#phonogram = phonogram.to_numpy()
#%% ---------------------------------------------------------------------------



# %% -------------------- FORCED ALIGNMENT -----------------------------------


# Line 1: Instantiate a forced aligner object from the 'charsiu' library using a specified model.
# 'aligner' specifies the model to be used for alignment, likely based on the Wav2Vec 2.0 model trained for frame classification every 10 milliseconds.
charsiu = charsiu_forced_aligner(aligner='charsiu/en_w2v2_fc_10ms')

# Line 2: Load a pre-trained model from Hugging Face's 'transformers' library.
# This model is likely a fine-tuned version of Wav2Vec 2.0 for the task of frame classification, useful for tasks like forced alignment or phoneme recognition.
modelo = Wav2Vec2ForFrameClassification.from_pretrained("charsiu/en_w2v2_fc_10ms")

# Line 3: Set the model to evaluation mode. This disables training specific behaviors like dropout, 
# ensuring the model's inference behavior is consistent and deterministic.
modelo.eval()

# Line 4: Instantiate a preprocessor for English from the 'charsiu' library.
# This object is likely used to prepare audio data by normalizing or applying necessary transformations 
# before it can be inputted to the model.
procesador = CharsiuPreprocessor_en()
#%%
phonemes_index = np.arange(0,42)
phonemes = [charsiu.charsiu_processor.mapping_id2phone(int(i)) for i in phonemes_index]
print(phonemes)

#%%
# Example: Forced alignment of an audio file

# Audio by my own: 
audio_file = '../tesis_speechRate/audios_tomas/she_has_your.wav'  # Replace with the path to your audio file
waveform, sample_rate = librosa.load(audio_file, sr=None)
x = torch.tensor(np.array([waveform]).astype(np.float32))
with torch.no_grad():
    y = modelo(x)
    y = modelo(x).logits
    y_softmax = torch.softmax(y, dim=2)

y = y.numpy()[0].T
y_softmax = y_softmax.numpy()[0].T

y_softmax[0,:] = 1
plt.figure(figsize=(10, 7))
plt.pcolor(y_softmax)
plt.yticks(np.arange(0.5, 42.5, 1), phonemes)
plt.title('Phonogram')
plt.colorbar()
plt.show()


# ----------------------------------------------------------------------------

#%% With softmax
plt.figure(figsize=(10, 7))
plt.pcolor(y_softmax)
plt.yticks(np.arange(0.5, 42.5, 1), phonemes)
plt.title('Phonogram')
plt.colorbar()
plt.show()


#%% --------------------- FUNCTIONS ------------------------------------------
def get_phonograms(TIMIT_set, model, n_samples = 10,  train=True):
    t0 = time.time()
    phonograms = []
    

    print('--------------GETTING PHONOGRAMS-----------------')
    for i in range(n_samples):
        sample = TIMIT_set[i]

        sample_id = get_sample_ID(sample['dialect_region'], sample['speaker_id'], sample['id'])
        
        audio_data = sample['audio']['array']
        x = torch.tensor(np.array([audio_data]).astype(np.float32))
        with torch.no_grad():
            y = model(x).logits
        y = y.numpy()[0].T

        # Save each phonogram as a matrix the ohonograms are numpy.ndarray
        y_df = pd.DataFrame(y)
        if train:
            y_df.to_csv('../tesis_speechRate/data_phonograms/CHARSIU/Train/' + sample_id + '.csv', index=False)
        else:
            y_df.to_csv('../tesis_speechRate/data_phonograms/CHARSIU/Test/' + sample_id + '.csv', index=False)
        
        
       # phonograms.append([sample_id,y]) 
        if i % 10 == 0:

            print('SAMPLE ', i, ' OF ', n_samples)

    t1 = time.time()
    print('-------------------------------------------------')
    print('Time to get phonograms: ', t1-t0)

# Dataframes with the array of the samples (array_id, array)

def get_sample_ID(dialect_region, speaker_id, id):
    return dialect_region + '_' + speaker_id + '_' + id

def get_sample_IDs(TIMIT_set, n_samples = 10):
    sample_id = []
    for i in range(n_samples):
        sample = TIMIT_set[i]
        sample_id.append(get_sample_ID(sample['dialect_region'], sample['speaker_id'], sample['id']))
    return sample_id

def get_dialectRegion_and_speacker_ID(sample_ID):
    # Sample_ID is an string, for example: 'DR1_CJF0_SA1'
    # Until the first '_' is Dialect region
    # Until the second '_' is the speaker ID
    parts = sample_ID.split('_')
    DR_ID = parts[0]
    speaker_ID = parts[1]
    return DR_ID, speaker_ID

#  Phonogram features
def phonogram_to_features(sample_ID, train=True):
    if train:
        phonogram = pd.read_csv('../tesis_speechRate/data_phonograms/CHARSIU/Train/'+sample_ID+'.csv')
    else: 
        phonogram = pd.read_csv('../tesis_speechRate/data_phonograms/CHARSIU/Test/'+sample_ID+'.csv')
    
    phonogram = phonogram.to_numpy()
    delta = librosa.feature.delta(phonogram)
    d_delta = librosa.feature.delta(phonogram, order=2)
    
    DR_ID, speaker_ID = get_dialectRegion_and_speacker_ID(sample_ID=sample_ID)

    dic = {'sample_id': sample_ID}
    dic['region_id'] =  DR_ID
    dic['speaker_id'] = speaker_ID
    
    for j in range(1,42): # 42 is the number of phonemes / It starts from 1 because the first column is the [SIL] phoneme
        dic['mean_phone_' + str(j+1)] = np.mean(phonogram[j,:])
        dic['mean_delta_' + str(j+1)] = np.mean(delta[j,:])
        dic['mean_d_delta_' + str(j+1)] = np.mean(d_delta[j,:])
        dic['std_phone_' + str(j+1)] = np.std(phonogram[j,:])
        dic['std_delta_' + str(j+1)] = np.std(delta[j,:])
        dic['std_d_delta_' + str(j+1)] = np.std(d_delta[j,:])
        dic['abs_mean_phone_' + str(j+1)] = np.mean(np.abs(phonogram[j,:]))
        dic['abs_mean_delta_' + str(j+1)] = np.mean(np.abs(delta[j,:]))
        dic['abs_mean_d_delta_' + str(j+1)] = np.mean(np.abs(d_delta[j,:]))
    dic['mean_all_phonogram'] = np.mean(phonogram)
    dic['mean_all_delta'] = np.mean(delta)
    dic['mean_all_d_delta'] = np.mean(d_delta)
    dic['std_all_phonogram'] = np.std(phonogram)
    dic['abs_all_phonogram'] = np.mean(np.abs(phonogram))
    dic['abs_all_delta'] = np.mean(np.abs(delta))
    dic['abs_all_d_delta'] = np.mean(np.abs(d_delta))
    dic['mean_how_many_phones'] = mean_phones(phonogram)

    features = pd.DataFrame(dic, index=[0])
    return features

def phonograms_to_features(sample_IDs, train = True):
    print('==============GETTING PHONOGRAMS FEATURES================')
    features = pd.DataFrame()
    for i in range(len(sample_IDs)):
        features = pd.concat([features, phonogram_to_features(sample_IDs[i], train=train)], ignore_index=True)

        if i % 10 == 0:
            print('SAMPLE ', i, ' OF ', len(sample_IDs))
            print('-------------------------------------------------')

    print('=================FINISHED===================')        
    return features

def softmax_phonogram(phonogram):
    # dataframe to torch
    phonogram = torch.tensor(phonogram.astype(np.float32))
    phonogram_softmax = torch.softmax(phonogram, dim=0)
    #to numpy
    phonogram_softmax = phonogram_softmax.numpy()

    return phonogram_softmax

def how_many_phones_since_t(phonogram, t=0):
    T = phonogram.shape[1]

    if t == 0:
        t = T

    phonogram_softmax = softmax_phonogram(phonogram)

    
    phonogram_softmax = phonogram_softmax > 0.5

    s = np.zeros(T)
    how_many_until_i = 0

    argmax = -1
    for i in range(T):
        arg_max_new = np.argmax(phonogram_softmax[:,i])
        is_a_silence = arg_max_new == 0
        is_a_new_phone = arg_max_new != argmax 

        if (is_a_new_phone) and (not is_a_silence):
            argmax = arg_max_new
            how_many_until_i += 1
            s[i] = how_many_until_i
    return how_many_until_i
        
def mean_phones(phonogram):
    how_many_phones = how_many_phones_since_t(phonogram)
    T = phonogram.shape[1]/100 # 100 is the number of frames per second
    return how_many_phones/T

#%% Test the functions
SAMPLE_ID = SAMPLE_IDs_TRAIN[0]
# read the phonogram
phonogram = pd.read_csv('../tesis_speechRate/data_phonograms/CHARSIU/Train/'+SAMPLE_ID+'.csv')

plt.figure(figsize=(10, 7))
plt.pcolor(phonogram)
plt.yticks(np.arange(0.5, 42.5, 1), phonemes)
plt.title('Phonogram')
plt.colorbar()
plt.show()

phonogram = phonogram.to_numpy()
phonogram_softmax = softmax_phonogram(phonogram)
phonogram_softmax = phonogram_softmax > 0.5
plt.figure(figsize=(10, 7))
plt.pcolor(phonogram_softmax)
plt.yticks(np.arange(0.5, 42.5, 1), phonemes)
plt.colorbar()
plt.title('Phonogram')
#%%

#how_many_phones_since_t(phonogram)
print(how_many_phones_since_t(phonogram))
mean_phones(phonogram)

#%% -------------------------- GENERATE PHONOGRAMS -----------------------------
# OBS: This process takes a long time. It save the phonograms as csv files in the data_phonograms folder 


N_TRAIN = len(TIMIT_train)
N_TEST = len(TIMIT_test)

#get_phonograms(TIMIT_train, modelo, N_TRAIN, train=True)



# =======Get phonograms TEST============= UNCOMMENT TO GET PHONOGRAMS

#get_phonograms(TIMIT_test, modelo, N_TEST, train=False)


#%% ---------------------------- GLOBAL VARIABLES --------------------------------

SAMPLE_IDs_TRAIN = get_sample_IDs(TIMIT_train, N_TRAIN)
SAMPLE_IDs_TEST = get_sample_IDs(TIMIT_test, N_TEST)




#%% -------------------------- GENERATE FEATURES -----------------------------

# Get phonogram features of N_SAMPLES samples in the training set

phonogram_features_TRAIN = phonograms_to_features(SAMPLE_IDs_TRAIN, train = True)
phonogram_features_TEST = phonograms_to_features(SAMPLE_IDs_TEST, train = False)
#%%
phonogram_features_TRAIN.set_index('sample_id', inplace=True)
phonogram_features_TEST.set_index('sample_id', inplace=True)


# Merge the phonogram features with the sample_phone dataframes
sample_phone_train.set_index('sample_id', inplace=True)
sample_phone_test.set_index('sample_id', inplace=True)
#%%
df_X_TRAIN = pd.merge(phonogram_features_TRAIN, sample_phone_train, left_index=True, right_index=True)
#%% -------------------------- SPLITTING -------------------------------------
speaker_id = df_X_TRAIN['speaker_id'].unique()
n_speakers = len(speaker_id)

# 80% Train - 20% Val
n_train = round(0.8*n_speakers)
n_val = n_speakers - n_train
# Choose randomly
random.shuffle(speaker_id)
speaker_id_train = speaker_id[:n_train]
speaker_id_val = speaker_id[n_train:]
#%%
# Filter the speaker_id_train
df_TRAIN = df_X_TRAIN[df_X_TRAIN['speaker_id'].isin(speaker_id_train)]
df_VAL = df_X_TRAIN[df_X_TRAIN['speaker_id'].isin(speaker_id_val)]


# %% TRAIN SET
X_TRAIN  = df_TRAIN.drop(columns=['mean_speed_wpau', 'mean_speed_wopau', 'region_id', 'speaker_id'])
y_TRAIN = df_TRAIN['mean_speed_wpau']
X_VAL = df_VAL.drop(columns=['mean_speed_wpau', 'mean_speed_wopau', 'region_id', 'speaker_id'])
y_VAL = df_VAL['mean_speed_wpau']
# %% =================== FEATURES SELECTION ===================================

A = ['mean_all_phonogram']
B = ['mean_all_delta']
C = ['mean_all_d_delta']
D = ['std_all_phonogram']
E = ['abs_all_delta']

#%% ALl PHONES FEATURES
F = []
for i in range(2,42):
    F.append('mean_phone_' + str(i))
    F.append('std_phone_' + str(i))
    F.append('std_d_delta_' + str(i))
    F.append('abs_mean_phone_' + str(i))
    F.append('abs_mean_delta_' + str(i))

#%% NEW FEATURES
G = ['mean_how_many_phones']

#%% Regression by groups

features = [A,B,C,D,E,F,G]
MSE_features = np.zeros(len(features))
scores = np.zeros(len(features))
for j in range(50):
    for i in range(len(features)):
        print('Features:', features[i])
        y_TRAIN = df_X_TRAIN['mean_speed_wpau']
        df_X_TRAIN_fi = df_X_TRAIN[features[i]]
        
        # Regression
        X_train, X_test, y_train, y_test = train_test_split(df_X_TRAIN_fi, y_TRAIN, test_size=0.2)
        positive=True
        model = linear_model.LinearRegression(positive=positive)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        MSE_features[i] += mean_squared_error(y_test, y_pred)
        scores[i] += model.score(X_test, y_test)

mean_score_features = scores/50
mean_MSE_features = MSE_features/50

#%% Now the same but with without pauses
y_TRAIN = df_X_TRAIN['mean_speed_wopau']
MSE_features = np.zeros(len(features))
scores = np.zeros(len(features))
for j in range(50):
    for i in range(len(features)):
        print('Features:', features[i])
        df_X_TRAIN_fi = df_X_TRAIN[features[i]]
        
        # Regression
        X_train, X_test, y_train, y_test = train_test_split(df_X_TRAIN_fi, y_TRAIN, test_size=0.2)
        positive=True
        model = linear_model.LinearRegression(positive=positive)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        MSE_features[i] += mean_squared_error(y_test, y_pred)
        scores[i] += model.score(X_test, y_test)
mean_score_features_wopau = scores/50
mean_MSE_features_wopau = MSE_features/50
#%%
# Do barplot of the features with MSE add one next to the other
x = np.arange(len(features))
width = 0.35  # the width of the bars
fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, mean_score_features, width, label='Whith pauses')
rects2 = ax.bar(x + width/2, mean_score_features_wopau, width, label='Without pauses')
plt.xticks(np.arange(len(features)), ['Mean Phonogram' + str(len(A)),'Mean Delta Phonogram'+ str(len(B)),'Mean DDelta Pronogram'+ str(len(C)),'STD Phonogram'+ str(len(D)),'ABS Delta Phonogram'+ str(len(E)),'Features Each Phone'+ str(len(F)),'OUR Feature'+ str(len(G))]
           , rotation=50)

# Add in this plot the name of each feature
plt.title('Prediction of the speech rate')
plt.xlabel('Groups of features')
plt.ylabel('Mean R2 - 50 iterations')
plt.legend()
plt.show()


# %% Correlation Matrix

ALL_FEATURES = A + B + C + D + E + F + G
X_TRAIN_ALL = X_TRAIN[ALL_FEATURES]
sns.heatmap(X_TRAIN_ALL.corr())



# %%
